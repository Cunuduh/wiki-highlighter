errortype ParseError {
  InvalidChar,
  Overflow,
};

function parseU64(buf: u8[], radix: u8): u64 | ParseError {
  let x: u64 = 0;

  for (c of buf) {
    const digit = charToDigit(c);

    if (digit >= radix) {
      return ParseError.InvalidChar;
    }

    // x *= radix
    let ov = Math.mulOverflow(x, radix);
    if (ov[1] !== 0) return ParseError.Overflow;

    // x += digit
    ov = Math.addOverflow(ov[0], digit);
    if (ov[1] !== 0) return ParseError.Overflow;
    x = ov[0];
  }
  return x;
}
function charToDigit(c: u8): u8 {
  return match (c) {
    if (('0'..'9').includes(c)): code - '0';
    if (('A'..'Z').includes(c)): code - 'A' + 10;
    if (('a'..'z').includes(c)): code - 'a' + 10;
    default: u8.max;
  };
}
// Example usage
const buf: u8[] = "123";
const radix: u8 = 10;
const result = parseU64(buf, radix);
if (typeof result === "error") {
  console.log(result);
} else {
  console.log(result);
}