errorset ParseError {
  InvalidChar,
  Overflow,
};

function parseU64(buf: u8[], radix: u8): u64 | ParseError {
  let x: u64 = 0;

  for (const c of buf) {
    const digit = charToDigit(c);

    if (digit >= radix) {
      return ParseError.InvalidChar;
    }

    // x *= radix
    let ov = Math.mulOverflow(x, radix);
    if (ov[1] !== 0) return ParseError.Overflow;

    // x += digit
    ov = Math.addOverflow(ov[0], digit);
    if (ov[1] !== 0) return ParseError.Overflow;
    x = ov[0];
  }
  return x;
}
function charToDigit(c: u8): u8 {
  return match (c) {
    when (/^[0-9]$/): c - '0';
    when (/^[A-Z]$/): c - 'A' + 10;
    when (/^[a-z]$/): c - 'a' + 10;
    default: u8.max;
  };
}

// Example usage

function test(): void | error {
  const result = try parseU64("1234", 10);
  console.assert(result === 1234, "parseU64 failed");
}
test();